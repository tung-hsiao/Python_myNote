# -*- coding: utf-8 -*-
"""opencv_test.ipynb

Automatically generated by Colaboratory.

"""
# cv2.GaussianBlur
# cv2.Canny
# cv2.Sobel

# cv2.erode
# cv2.dilate

# np.uint8
# np.zeros_like
# np.ones
# np.absolute
# np.max

import cv2
import numpy as np
working_dir = "/content/drive/MyDrive/opencv/"

def edgeDetection_canny():
  img = cv2.imread(working_dir + "image1.jpg")
  img_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  img_gray = cv2.GaussianBlur(img_gray, (7,7), 0)  # image src, kernel size, sigma

  lowThreshold = 30
  highThreshold = 100
  kernel_size = 3
  edges_canny = cv2.Canny(img_gray, lowThreshold, highThreshold, apertureSize = kernel_size)

  cv2.imwrite(working_dir + "edges_canny.png",edges_canny)

def edgeDetection_sobel():
  img = cv2.imread(working_dir + "image1.jpg")
  img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  
  sobelx = cv2.Sobel(img_gray, cv2.CV_64F, 1, 0, ksize=5)  # x
  sobely = cv2.Sobel(img_gray, cv2.CV_64F, 0, 1, ksize=5)  # y
  
  abs_sobelx = np.absolute(sobelx)
  abs_sobely = np.absolute(sobely)

  scaled_sobelx = np.uint8(255*abs_sobelx/np.max(abs_sobelx))
  scaled_sobely = np.uint8(255*abs_sobely/np.max(abs_sobely))
  scaled_sobel = scaled_sobelx + scaled_sobely

  threshold = 20
  edges_sobel = np.zeros_like(scaled_sobelx)
  edges_sobel[(scaled_sobel >= threshold)] = 255

  cv2.imwrite(working_dir + "edges_sobel.png", edges_sobel)

def erode_dilate(img_name):
  img = cv2.imread(working_dir + img_name + ".png")
  kernel = np.ones((3,3), np.uint8)
  img = cv2.erode(img, kernel, iterations = 1)
  img = cv2.dilate(img, kernel, iterations = 1)
  cv2.imwrite(working_dir + "erode_dilate_img.png", img)

edgeDetection_sobel()
erode_dilate("edges_sobel")